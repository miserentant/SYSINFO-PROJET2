#include <stdio.h> 
#include <stdlib.h>
#include <math.h> 
#include <pthread.h> 
struct prime{ 
	int nombre; 
	int compteur; 
	int fichier; 
	struct prime *next; 
}; 
//structure qui doit être passée en argument pour les threads qui gèrent la factorisation!
struct param{
	int numero; //numéro de l'item et donc des entrées des tableaux qui le concernent!

	int N; //indique la taille des tableaux d'échange prod-cons
	sem_t empty1; //echange dans prod-cons 1
	sem_t full1;  //echange dans prod-cons 1
 	int **tabNbr;   //echange dans prod-cons 1

	struct prime *list; //reférence vers la liste des nb premiers

	sem_t empty2; //echange dans prod-cons 2
	sem_t full2;  //echange dans prod-cons 2

	int **tabFact; //echange dans le prod-cons 2
};

void *factorisation(void *structure){
	int boolean = 1;
	long nombre;
	long fichier;
	int parcour;
	int test;
	while(boolean){ //tant qu'il y a des chiffres a factoriser. 
		sem_wait(&(strucutre->full1)); //attente de chiffre.	
		phtread_mutex_lock(&(structure->mutex1));
		parcour =0;
		do{   // les threads peuvent aller chercher les nombre n'importe ou dans le premier buffer. 
			//
			//
			if(parcour >= structure->N){printf("On lui dit qu'il y a des entrées non vides mais elles sont vides");}
			//A RETIRER
			
			nombre = (structure->tabNbr)[0][parcour];
			fichier = (structure->tabNbr)[1][parcour];
			(structure->tabNbr)[0][parcour]=0; //eviter de refactoriser plusieurs fois le même nombre.
			parcour++;
		}while(nombre==0);
		pthread_mutex_unlock(&(structure->mutex1));
		sem_post(&(structure->empty1));
		if(nombre ==-1){ boolean == 0; //plus de nombre a tester
		}
		else{  //Cas ou il y a un nombre a factoriser
			struct prime *run = structure->list;
			while(nombre>1){
				if(nombre % ((long) run->nombre)==0){
					nombre  = nombre / ((long) run->nombre);
					// Il faut incrémenter ce facteur en passant pas le dernier consomateur
					parcour=-1; 
					sem_wait(&(structure->empty2));
					pthread_mutex_lock(&(structure->mutex2));
					do{	
						parcour++;
						if(parcour >= structure->N){printf("On lui dit qu'il y a des entrées non vides mais elles sont vides");}
						//A RETIRER
			
						test=(structure->tabFact)[0][parcour];
					}while(test!=0);
					(structure->tabFact)[0][parcour]=run->nombre; // Permet de dire que c'est ce facteur là.
					(structure->tabFact)[1][parcour]=1; //permet de dire qu'il faut incrémenter de 1.
					(structure->tabFact)[0][parcour]=(int) fichier;
					pthread_mutex_unlock(&(structure->mutex2));
					sem_post(&(structure->full2));
				}
				else if(run->next==NULL){
					// Il faut calculer le nombre premier suivent en passant par le dernier consomateur
					// Dans prime.c je faisais : run = ajoutprime(list,run);
					parcour=-1; 
					sem_wait(&(structure->empty2));
					pthread_mutex_lock(&(structure->mutex2));
					do{	
						parcour++;
						if(parcour >= structure->N){printf("On lui dit qu'il y a des entrées non vides mais elles sont vides");}
						//A RETIRER
			
						test=(structure->tabFact)[0][parcour];
					}while(test!=0);
					(structure->tabFact)[0][parcour]=run->nombre; // Permet de dire après quelle nombre premier il faut chercher le suivant.
					(structure->tabFact)[1][parcour]=0; //permet de dire qu'il faut creer un objet de type struct prime

					pthread_mutex_unlock(&(structure->mutex2));
					sem_post(&(structure->full2));
				}
				else{
					run = run->next;
				}
			}
		}
	}
		
		

}

//structure qui doit être passée en argument pour le thread qui gere la liste !
struct param{
	

	int N; //indique la taille du tableau d'échange prod-cons

	struct prime *list; //reférence vers la liste des nb premiers

	sem_t empty2; //echange dans prod-cons 2
	sem_t full2;  //echange dans prod-cons 2

	int **tabFact; //echange dans le prod-cons 2
};

/*
Fonction a donner en argument lors de la création du thread qui est le consomateur du deuxième schéma prod-cons.
Cette fonction permet de calculer un argument 
*/


void *comptabilisateur(void *structure){
	struct prime *last = structure->list; //reférence vers le dernier nb premier de la liste chainée.
	int boolean =1;
	int parcour;
	int nombre;
	int fichier;
	int mode; // Si 1, incrimenter un compteur, si 0, recherche d'un nb premier.
	struct prime run;
	while(boolean){ // Touver un moyen de dire quand il faut arrêter!
		sem_wait(&(strucutre->full2)); //attente de chiffre.	
		phtread_mutex_lock(&(structure->mutex2));
		parcour =0;
		do{   //  
			//
			//
			if(parcour >= structure->N){printf("On lui dit qu'il y a des entrées non vides mais elles sont vides");}
			//A RETIRER
			
			nombre = (structure->tabFact)[0][parcour];
			mode = (structure->tabFact)[1][parcour];
			fichier = (structure->taFact)[2][parcour];
			(structure->tabNbr)[0][parcour]=0; //eviter de refactoriser plusieurs fois le même nombre.
			parcour++;
		}while(nombre==0);
		pthread_mutex_unlock(&(structure->mutex2));
		sem_post(&(structure->empty2));
		if(mode==1){
			run = structure->list;
			while(run->nombre!=nombre){
				run = run->next 
				if(run==NULL){printf("Probleme, on donne un compteur a incrémenter mais le facteur n'existe pas\n");
				//commentaire a enlever
				}
			}
			run->fichier=fichier;
			run->compteur++;
		}
		else if(mode==0){
			struct prime *diviseur = structure->list;
			int nombreatest = (fin->nombre)+1;
			int boolean2 =1;
			while (boolean){	
				if((nombreatest % diviseur->nombre) ==0){
				//Ce n'est pas un nombre premier. Il faut tester l'entier suivant.
					diviseur = debut;
					nombreatest++;
				}
				else{
					diviseur = diviseur->next;
					if(diviseur==NULL||( ((double) diviseur->nombre) > ((double) sqrt( (double) nombreatest)) )){
						boolean2 = 0;
					}
				}
			}	
			struct prime *suite = (struct prime *)malloc(sizeof(struct prime));
			suite->nombre = nombreatest;
			printf("Calcul d'un nombre premier suivant : %d\n",nombreatest);
			suite->compteur = 0;
			suite->next = NULL;
			last->next=suite; 
			last = suite;	
		}
		else { //A enlever	
			printf("Le mode doit tjs etre 0 ou 1 --' \n");
		}
	}
}
